#!/usr/bin/env python3
"""
Script build chuy√™n bi·ªát cho Windows
T·∫°o file .exe v·ªõi t·∫•t c·∫£ dependencies c·∫ßn thi·∫øt
"""

import os
import sys
import subprocess
import shutil
import platform
from pathlib import Path

def run_command(cmd, description=""):
    """Ch·∫°y command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"\nüîÑ {description}")
    print(f"Command: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - Th√†nh c√¥ng!")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - L·ªói!")
        print(result.stderr)
        return False
    return True

def check_windows():
    """Ki·ªÉm tra c√≥ ph·∫£i Windows kh√¥ng"""
    if platform.system() != "Windows":
        print("‚ö†Ô∏è  Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø cho Windows")
        print(f"H·ªá ƒëi·ªÅu h√†nh hi·ªán t·∫°i: {platform.system()}")
        print("V·∫´n c√≥ th·ªÉ ho·∫°t ƒë·ªông nh∆∞ng file output s·∫Ω kh√¥ng c√≥ extension .exe")
        return False
    return True

def install_dependencies():
    """C√†i ƒë·∫∑t t·∫•t c·∫£ dependencies c·∫ßn thi·∫øt"""
    print("\nüì¶ C√†i ƒë·∫∑t dependencies...")
    
    # Dependencies c∆° b·∫£n (√≠t c√≥ v·∫•n ƒë·ªÅ)
    basic_dependencies = [
        "pyinstaller>=5.0",
        "fire==0.5.*", 
        "loguru==0.7.*",
        "tenacity==8.2.*",
        "schedule==1.2.*",
        "ratelimit==2.2.*",
        "pyjwt==2.7.*",
        "arrow==1.2.*"
    ]
    
    # Dependencies ph·ª©c t·∫°p (c√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ)
    complex_dependencies = [
        "numpy==1.24.*",
        "httpx[http2]==0.24.*"
    ]
    
    # Socket.IO dependencies (th∆∞·ªùng c√≥ v·∫•n ƒë·ªÅ nh·∫•t)
    socketio_dependencies = [
        "python-engineio",
        "python-socketio<5"
    ]
    
    # C√†i basic dependencies
    print("üîß C√†i ƒë·∫∑t basic dependencies...")
    for dep in basic_dependencies:
        if not run_command(f"pip install {dep}", f"C√†i ƒë·∫∑t {dep}"):
            print(f"‚ùå Failed to install {dep}")
            return False
    
    # C√†i complex dependencies
    print("üîß C√†i ƒë·∫∑t complex dependencies...")
    for dep in complex_dependencies:
        if not run_command(f"pip install {dep}", f"C√†i ƒë·∫∑t {dep}"):
            print(f"‚ö†Ô∏è Failed to install {dep}, trying alternative...")
            # Th·ª≠ c√°ch kh√°c
            if not run_command(f"pip install --no-cache-dir {dep}", f"C√†i ƒë·∫∑t {dep} (no cache)"):
                print(f"‚ùå Cannot install {dep}")
                return False
    
    # C√†i Socket.IO dependencies (c√≥ th·ªÉ skip n·∫øu fail)
    print("üîß C√†i ƒë·∫∑t Socket.IO dependencies...")
    socketio_success = True
    for dep in socketio_dependencies:
        if not run_command(f"pip install {dep}", f"C√†i ƒë·∫∑t {dep}"):
            print(f"‚ö†Ô∏è Failed to install {dep}")
            socketio_success = False
    
    if not socketio_success:
        print("‚ùå Socket.IO installation failed!")
        print("üí° Ch·∫°y script ƒë·∫∑c bi·ªát ƒë·ªÉ fix:")
        print("   python fix_socketio.py")
        print("üí° Ho·∫∑c ti·∫øp t·ª•c v·ªõi mock socketio (m·ªôt s·ªë t√≠nh nƒÉng s·∫Ω b·ªã disabled)")
        
        response = input("Ti·∫øp t·ª•c build v·ªõi mock socketio? (y/N): ").lower()
        if response != 'y':
            return False
        
        # Copy fallback file
        try:
            import shutil
            if os.path.exists("socketio_fallback.py"):
                print("‚úÖ S·ª≠ d·ª•ng socketio fallback")
            else:
                print("‚ùå Kh√¥ng t√¨m th·∫•y socketio_fallback.py")
                return False
        except Exception as e:
            print(f"‚ùå L·ªói setup fallback: {str(e)}")
            return False
    
    return True

def create_windows_spec():
    """T·∫°o .spec files cho Windows v·ªõi c·∫•u h√¨nh ƒë·∫ßy ƒë·ªß"""
    
    # CLI spec
    cli_spec = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['lokbot/__main__.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('lokbot/assets', 'lokbot/assets'),
        ('config.example.json', '.'),
    ],
    hiddenimports=[
        'lokbot',
        'lokbot.app',
        'lokbot.client', 
        'lokbot.farmer',
        'lokbot.async_farmer',
        'lokbot.async_client',
        'lokbot.captcha_solver',
        'lokbot.util',
        'lokbot.enum',
        'lokbot.exceptions',
        'fire',
        'loguru',
        'tenacity',
        'schedule',
        'ratelimit',
        'numpy',
        'httpx',
        'pyjwt',
        'arrow',
        'socketio',
        'engineio',
        'socketio.client',
        'engineio.client',
        'socketio.async_client',
        'engineio.async_client',
        'engineio.async_drivers.aiohttp',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='lokbot',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''

    # GUI spec
    gui_spec = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['lokbot/gui_main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('lokbot/assets', 'lokbot/assets'),
        ('config.example.json', '.'),
    ],
    hiddenimports=[
        'lokbot',
        'lokbot.app',
        'lokbot.client',
        'lokbot.farmer', 
        'lokbot.async_farmer',
        'lokbot.async_client',
        'lokbot.captcha_solver',
        'lokbot.util',
        'lokbot.enum',
        'lokbot.exceptions',
        'lokbot.gui',
        'fire',
        'loguru',
        'tenacity',
        'schedule',
        'ratelimit',
        'numpy',
        'httpx',
        'pyjwt',
        'arrow',
        'socketio',
        'engineio',
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
        'tkinter.simpledialog',
        'socketio.client',
        'engineio.client',
        'socketio.async_client',
        'engineio.async_client',
        'engineio.async_drivers.aiohttp',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='lokbot-gui',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open("lokbot-windows.spec", "w", encoding="utf-8") as f:
        f.write(cli_spec)
    
    with open("lokbot-gui-windows.spec", "w", encoding="utf-8") as f:
        f.write(gui_spec)
    
    print("‚úÖ ƒê√£ t·∫°o Windows spec files")
    return True

def build_executables():
    """Build executables cho Windows"""
    print("\nüî® Building executables...")
    
    # T·∫°o th∆∞ m·ª•c
    os.makedirs("dist", exist_ok=True)
    os.makedirs("build", exist_ok=True)
    
    # Build CLI
    print("üì¶ Building CLI version...")
    if not run_command("pyinstaller --clean lokbot-windows.spec", "Build CLI"):
        return False
    
    # Build GUI  
    print("üì¶ Building GUI version...")
    if not run_command("pyinstaller --clean lokbot-gui-windows.spec", "Build GUI"):
        return False
    
    return True

def create_batch_files():
    """T·∫°o batch files cho Windows"""
    
    cli_bat = '''@echo off
echo ==========================================
echo    LokBot CLI - League of Kingdoms Bot
echo ==========================================
echo.
echo Usage: lokbot.exe [YOUR_X_ACCESS_TOKEN]
echo.
if "%1"=="" (
    echo Error: No token provided!
    echo Example: lokbot.exe your_x_access_token_here
    echo.
    pause
    exit /b 1
)

echo Starting LokBot with token: %1
echo.
lokbot.exe %1
pause
'''

    gui_bat = '''@echo off
echo ==========================================
echo    LokBot GUI - League of Kingdoms Bot  
echo ==========================================
echo.
echo Starting GUI application...
echo You can manage multiple tokens and configs in the GUI.
echo.

start lokbot-gui.exe
'''

    installer_bat = '''@echo off
echo ==========================================
echo       LokBot Windows Installer
echo ==========================================
echo.
echo This will copy LokBot files to Program Files
echo and create desktop shortcuts.
echo.
pause

if not exist "%ProgramFiles%\\LokBot" mkdir "%ProgramFiles%\\LokBot"

copy lokbot.exe "%ProgramFiles%\\LokBot\\"
copy lokbot-gui.exe "%ProgramFiles%\\LokBot\\"
copy *.bat "%ProgramFiles%\\LokBot\\"

echo.
echo Creating desktop shortcuts...
echo Set oWS = WScript.CreateObject("WScript.Shell") > temp.vbs
echo sLinkFile = "%USERPROFILE%\\Desktop\\LokBot GUI.lnk" >> temp.vbs
echo Set oLink = oWS.CreateShortcut(sLinkFile) >> temp.vbs
echo oLink.TargetPath = "%ProgramFiles%\\LokBot\\lokbot-gui.exe" >> temp.vbs
echo oLink.Save >> temp.vbs
cscript temp.vbs
del temp.vbs

echo.
echo ‚úÖ Installation completed!
echo LokBot GUI shortcut created on Desktop
pause
'''
    
    with open("dist/run_lokbot_cli.bat", "w", encoding="utf-8") as f:
        f.write(cli_bat)
    
    with open("dist/run_lokbot_gui.bat", "w", encoding="utf-8") as f:
        f.write(gui_bat)
        
    with open("dist/install.bat", "w", encoding="utf-8") as f:
        f.write(installer_bat)
    
    print("‚úÖ ƒê√£ t·∫°o batch files")
    return True

def verify_build():
    """Ki·ªÉm tra k·∫øt qu·∫£ build"""
    print("\nüîç Ki·ªÉm tra k·∫øt qu·∫£ build...")
    
    files_to_check = [
        "dist/lokbot.exe",
        "dist/lokbot-gui.exe", 
        "dist/run_lokbot_cli.bat",
        "dist/run_lokbot_gui.bat",
        "dist/install.bat"
    ]
    
    all_good = True
    for file_path in files_to_check:
        if Path(file_path).exists():
            size = Path(file_path).stat().st_size
            print(f"‚úÖ {file_path} - {size/1024/1024:.1f} MB")
        else:
            print(f"‚ùå {file_path} - Kh√¥ng t√¨m th·∫•y")
            all_good = False
    
    return all_good

def main():
    """Main function"""
    print("ü™ü LokBot Windows Build Script")
    print("=" * 50)
    
    # Ki·ªÉm tra Windows
    is_windows = check_windows()
    
    # Ki·ªÉm tra entry point
    if not Path("lokbot/__main__.py").exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y lokbot/__main__.py")
        print("H√£y ch·∫°y script trong th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n")
        sys.exit(1)
    
    # C√°c b∆∞·ªõc build
    steps = [
        (install_dependencies, "C√†i ƒë·∫∑t dependencies"),
        (create_windows_spec, "T·∫°o Windows spec files"),
        (build_executables, "Build executables"),
        (create_batch_files, "T·∫°o batch files"),
        (verify_build, "Ki·ªÉm tra k·∫øt qu·∫£")
    ]
    
    for step_func, step_name in steps:
        print(f"\n{'='*20} {step_name} {'='*20}")
        try:
            if not step_func():
                print(f"‚ùå L·ªói t·∫°i b∆∞·ªõc: {step_name}")
                sys.exit(1)
        except Exception as e:
            print(f"‚ùå Exception t·∫°i b∆∞·ªõc {step_name}: {str(e)}")
            sys.exit(1)
    
    # K·∫øt qu·∫£
    print("\n" + "="*60)
    print("üéâ BUILD WINDOWS HO√ÄN TH√ÄNH!")
    print("="*60)
    print("üìÅ Files ƒë∆∞·ª£c t·∫°o trong th∆∞ m·ª•c dist/:")
    print("   ‚Ä¢ lokbot.exe           - CLI version")
    print("   ‚Ä¢ lokbot-gui.exe       - GUI version")
    print("   ‚Ä¢ run_lokbot_cli.bat   - CLI helper")
    print("   ‚Ä¢ run_lokbot_gui.bat   - GUI helper")
    print("   ‚Ä¢ install.bat          - Windows installer")
    
    print("\nüöÄ C√°ch s·ª≠ d·ª•ng:")
    print("   1. Copy to√†n b·ªô th∆∞ m·ª•c dist/ sang Windows")
    print("   2. Double-click lokbot-gui.exe ƒë·ªÉ m·ªü GUI")
    print("   3. Ho·∫∑c ch·∫°y run_lokbot_cli.bat v·ªõi token")
    print("   4. Ch·∫°y install.bat ƒë·ªÉ c√†i ƒë·∫∑t v√†o Program Files")
    
    print("\nüí° L∆∞u √Ω:")
    print("   - Files .exe ch·ªâ ch·∫°y ƒë∆∞·ª£c tr√™n Windows")
    print("   - GUI version kh√¥ng c·∫ßn console window")
    print("   - C√≥ th·ªÉ b·ªã Windows Defender block, th√™m exception")
    print("   - Test tr√™n m√°y s·∫°ch tr∆∞·ªõc khi ph√¢n ph·ªëi")

if __name__ == "__main__":
    main()