#!/usr/bin/env python3
"""
Script t·ª± ƒë·ªông build LokBot th√†nh file .exe
S·ª≠ d·ª•ng PyInstaller ƒë·ªÉ ƒë√≥ng g√≥i ·ª©ng d·ª•ng Python th√†nh executable
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, description=""):
    """Ch·∫°y command v√† hi·ªÉn th·ªã k·∫øt qu·∫£"""
    print(f"\nüîÑ {description}")
    print(f"Command: {cmd}")
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - Th√†nh c√¥ng!")
        if result.stdout:
            print(result.stdout)
    else:
        print(f"‚ùå {description} - L·ªói!")
        print(result.stderr)
        return False
    return True

def check_pyinstaller():
    """Ki·ªÉm tra v√† c√†i ƒë·∫∑t PyInstaller n·∫øu ch∆∞a c√≥"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True
    except ImportError:
        print("üì¶ ƒêang c√†i ƒë·∫∑t PyInstaller...")
        return run_command("pip install pyinstaller", "C√†i ƒë·∫∑t PyInstaller")

def create_requirements_txt():
    """T·∫°o requirements.txt t·ª´ Pipfile.lock"""
    print("\nüìù T·∫°o requirements.txt t·ª´ Pipfile...")
    
    try:
        # ƒê·ªçc t·ª´ Pipfile
        pipfile_content = """arrow==1.2.*
fire==0.5.*
loguru==0.7.*
tenacity==8.2.*
schedule==1.2.*
ratelimit==2.2.*
python-socketio<5
numpy==1.24.*
httpx[http2]==0.24.*
pyjwt==2.7.*
pyinstaller>=5.0
"""
        
        with open("requirements.txt", "w", encoding="utf-8") as f:
            f.write(pipfile_content)
        
        print("‚úÖ ƒê√£ t·∫°o requirements.txt")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o requirements.txt: {str(e)}")
        return False

def create_spec_file():
    """T·∫°o file .spec cho PyInstaller v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u"""
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['lokbot/__main__.py'],
    pathex=['.'],
    binaries=[],
    datas=[
        ('lokbot/assets', 'lokbot/assets'),
        ('config.example.json', '.'),
    ],
    hiddenimports=[
        'lokbot',
        'lokbot.app',
        'lokbot.client',
        'lokbot.farmer',
        'lokbot.async_farmer',
        'lokbot.async_client',
        'lokbot.captcha_solver',
        'lokbot.util',
        'lokbot.enum',
        'lokbot.exceptions',
        'engineio.async_drivers.aiohttp',
        'socketio.async_client',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='lokbot',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'''
    
    # T·∫°o spec file cho GUI version
    gui_spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['lokbot/gui_main.py'],
    pathex=['.'],
    binaries=[],
    datas=[
        ('lokbot/assets', 'lokbot/assets'),
        ('config.example.json', '.'),
    ],
    hiddenimports=[
        'lokbot',
        'lokbot.app',
        'lokbot.client',
        'lokbot.farmer',
        'lokbot.async_farmer',
        'lokbot.async_client',
        'lokbot.captcha_solver',
        'lokbot.util',
        'lokbot.enum',
        'lokbot.exceptions',
        'lokbot.gui',
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
        'tkinter.simpledialog',
        'engineio.async_drivers.aiohttp',
        'socketio.async_client',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='lokbot-gui',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open("lokbot.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    
    with open("lokbot-gui.spec", "w", encoding="utf-8") as f:
        f.write(gui_spec_content)
    
    print("‚úÖ ƒê√£ t·∫°o lokbot.spec v√† lokbot-gui.spec")
    return True

def build_exe():
    """Build file .exe"""
    print("\nüî® B·∫Øt ƒë·∫ßu build file .exe...")
    
    # T·∫°o th∆∞ m·ª•c build n·∫øu ch∆∞a c√≥
    os.makedirs("build", exist_ok=True)
    os.makedirs("dist", exist_ok=True)
    
    # Build CLI version
    print("üì¶ Building CLI version...")
    cmd = "pyinstaller --clean lokbot.spec"
    if not run_command(cmd, "Build CLI version"):
        return False
    
    # Build GUI version
    print("üì¶ Building GUI version...")
    cmd = "pyinstaller --clean lokbot-gui.spec"
    if not run_command(cmd, "Build GUI version"):
        return False
    
    # Ki·ªÉm tra files ƒë√£ ƒë∆∞·ª£c t·∫°o (macOS kh√¥ng c√≥ .exe extension)
    import platform
    ext = ".exe" if platform.system() == "Windows" else ""
    
    cli_exe = Path(f"dist/lokbot{ext}")
    gui_exe = Path(f"dist/lokbot-gui{ext}")
    
    success = True
    if cli_exe.exists():
        print(f"üéâ CLI Build th√†nh c√¥ng! File t·∫°i: {cli_exe.absolute()}")
        print(f"üìä K√≠ch th∆∞·ªõc CLI: {cli_exe.stat().st_size / 1024 / 1024:.1f} MB")
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y lokbot{ext} sau khi build")
        success = False
    
    if gui_exe.exists():
        print(f"üéâ GUI Build th√†nh c√¥ng! File t·∫°i: {gui_exe.absolute()}")
        print(f"üìä K√≠ch th∆∞·ªõc GUI: {gui_exe.stat().st_size / 1024 / 1024:.1f} MB")
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y lokbot-gui{ext} sau khi build")
        success = False
    
    return success

def create_batch_file():
    """T·∫°o file .bat ƒë·ªÉ ch·∫°y d·ªÖ d√†ng h∆°n"""
    # CLI batch file
    cli_batch_content = '''@echo off
echo ========================================
echo       LokBot CLI - League of Kingdoms Bot
echo ========================================
echo.
echo Cach su dung: lokbot.exe [YOUR_TOKEN]
echo.
if "%1"=="" (
    echo Loi: Ban chua nhap token!
    echo Vi du: lokbot.exe your_x_access_token_here
    pause
    exit /b 1
)

lokbot.exe %1
pause
'''
    
    # GUI batch file
    gui_batch_content = '''@echo off
echo ========================================
echo       LokBot GUI - League of Kingdoms Bot
echo ========================================
echo.
echo Starting GUI application...
echo.

lokbot-gui.exe
'''
    
    with open("dist/run_lokbot_cli.bat", "w", encoding="utf-8") as f:
        f.write(cli_batch_content)
    
    with open("dist/run_lokbot_gui.bat", "w", encoding="utf-8") as f:
        f.write(gui_batch_content)
    
    print("‚úÖ ƒê√£ t·∫°o file run_lokbot_cli.bat v√† run_lokbot_gui.bat")
    return True

def main():
    """H√†m main ƒë·ªÉ build"""
    print("ü§ñ LokBot Build Script")
    print("=" * 50)
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not Path("lokbot/__main__.py").exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y lokbot/__main__.py. H√£y ch·∫°y script trong th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.")
        sys.exit(1)
    
    # C√°c b∆∞·ªõc build
    steps = [
        (check_pyinstaller, "Ki·ªÉm tra PyInstaller"),
        (create_requirements_txt, "T·∫°o requirements.txt"),
        (create_spec_file, "T·∫°o file c·∫•u h√¨nh .spec"),
        (build_exe, "Build file .exe"),
        (create_batch_file, "T·∫°o file batch helper")
    ]
    
    for step_func, step_name in steps:
        try:
            if not step_func():
                print(f"‚ùå L·ªói t·∫°i b∆∞·ªõc: {step_name}")
                sys.exit(1)
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°i b∆∞·ªõc {step_name}: {str(e)}")
            sys.exit(1)
    
    print("\nüéâ BUILD HO√ÄN TH√ÄNH!")
    print("=" * 50)
    print("üìÅ Files ƒë∆∞·ª£c t·∫°o:")
    print("   ‚Ä¢ CLI Version: dist/lokbot.exe")
    print("   ‚Ä¢ GUI Version: dist/lokbot-gui.exe")
    print("\nüöÄ C√°ch s·ª≠ d·ª•ng:")
    print("   CLI: lokbot.exe YOUR_X_ACCESS_TOKEN")
    print("   GUI: lokbot-gui.exe (ho·∫∑c double-click)")
    print("\nüìã Helper files:")
    print("   ‚Ä¢ run_lokbot_cli.bat - Ch·∫°y CLI version")
    print("   ‚Ä¢ run_lokbot_gui.bat - Ch·∫°y GUI version")
    print("\nüí° L∆∞u √Ω:")
    print("   - Files .exe c√≥ th·ªÉ ch·∫°y ƒë·ªôc l·∫≠p m√† kh√¥ng c·∫ßn Python")
    print("   - GUI version cho ph√©p qu·∫£n l√Ω nhi·ªÅu token v√† config")
    print("   - C√≥ th·ªÉ copy sang m√°y kh√°c ƒë·ªÉ ch·∫°y")
    print("   - K√≠ch th∆∞·ªõc file c√≥ th·ªÉ kh√° l·ªõn do ch·ª©a Python runtime")

if __name__ == "__main__":
    main()